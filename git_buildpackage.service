<service name="git_buildpackage">
  <summary>An OBS service that uses git buildpackage</summary>
  <description>This OBS service is using git buildpackage to create the debian
  source package.
  It can either do a fresh git clone, when the --url parameter is passed, or
  use a pre-cloned directory, when --cache is used. The latter is useful
  when combined with obs_scm, which caches the git repository.</description>

  <parameter name="url">
    <description>URL to clone GIT repository from</description>
    <required/>
  </parameter>

  <parameter name="revision">
    <description>
       When using git, revision may refer to any of the following:
      
       * explicit SHA1: a1b2c3d4....
         - the SHA1 must be reachable from a default clone/fetch
           (generally, must be reachable from some branch or tag on the
           remote).
         - set by: git checkout ${SHA1}
      
       * short branch name: "master", "devel" etc.
         - set by: git checkout ${branch}
                   git pull
      
       * explicit ref: refs/heads/master, refs/tags/v1.2.3,
         refs/changes/49/11249/1
         - set by: git fetch ${url} ${revision}:${revision}
                   git checkout ${revision}
    </description>
  </parameter>

  <parameter name="submodules">
    <description>Whether or not to include git submodules.  Default is 'enable'</description>
    <allowedvalue>enable</allowedvalue>
    <allowedvalue>disable</allowedvalue>
  </parameter>

  <parameter name="pristine-tar">
    <description>Use pristine-tar.  Default is 'enable'</description>
    <allowedvalue>enable</allowedvalue>
    <allowedvalue>disable</allowedvalue>
  </parameter>

  <parameter name="build_args">
    <description>Apply build_args.  Default is '-nc -uc -us -S'</description>
  </parameter>

  <parameter name="dch-release-update">
    <description>Append OBS release number.  Default is 'disable'</description>
    <allowedvalue>enable</allowedvalue>
    <allowedvalue>disable</allowedvalue>
  </parameter>

  <parameter name="cache-dir">
    <description>obs_scm top level cache directory, eg: /var/cache/obs/tar_scm
    If enabled, and if a cached repository created by obs_scm exists,
    it will be used. Caches are keyed on the full repository URL.
    WARNING: you must use this only when chaining after an obs_scm run in _service
    otherwise the cached repository will not be updated and it will be stale.
    Default is empty string</description>
  </parameter>

</service>

